{"version":3,"sources":["widget/TopStarPlot.js"],"names":["TopStarPlot","x","a","b","data","points","timepoints","time_range_disp","time_range","Date","Math","max","min","topstars","forEach","topstar","submissions","sub","timestamp_ms","Object","keys","map","Infinity","sort","idx","tot_score","time_idx","push","score","idx0","gained_score","length","height","xField","yField","seriesField","stepType","legend","layout","position","meta","formatter","nickname","type","minLimit","maxLimit","format_ts"],"mappings":"wNAQe,SAASA,EAAT,GAA8B,IAJ7BC,EAAGC,EAAGC,EAIeC,EAAO,EAAPA,KAC7BC,EAAO,GACPC,EAAW,GAEXC,EAAkB,CAAoB,IAAnBH,EAAKI,WAAW,IAR3BP,GAQ4C,IAAIQ,KAAO,IARpDP,EAQ6E,IAAnBE,EAAKI,WAAW,GAAQ,IAR/EL,EAQwG,IAAnBC,EAAKI,WAAW,GAPhHE,KAAKC,IAAIT,EAAGQ,KAAKE,IAAIT,EAAGF,MA8C/B,OArCAG,EAAKS,SAASC,SAAQ,SAACC,GACnBA,EAAQC,YAAYF,SAAQ,SAACG,GACzBX,EAAWW,EAAIC,eAAc,QAGrCZ,EAAW,sBACJa,OAAOC,KAAKd,GAAYe,KAAI,SAACpB,GAAD,OAAQA,MADhC,CAEPM,EAAgB,GAChBA,EAAgB,GAChBe,MACFC,OAEFnB,EAAKS,SAASC,SAAQ,SAACC,EAASS,GAC5B,IAAIC,EAAU,EACVC,EAAS,EAYb,IAVAX,EAAQC,YAAYF,SAAQ,SAACG,GACzB,KAAMX,EAAWoB,GAAUT,EAAIC,aAAcQ,IACzCrB,EAAOsB,KAAK,CACRT,aAAcZ,EAAWoB,GACzBE,MAAOH,EACPI,KAAM,GAAGL,IAGjBC,GAAWR,EAAIa,gBAEbJ,EAASpB,EAAWyB,OAAO,EAAGL,IAChCrB,EAAOsB,KAAK,CACRT,aAAcZ,EAAWoB,GACzBE,MAAOH,EACPI,KAAM,GAAGL,OAQjB,cAAC,IAAD,CACIQ,OAAQ,IACR5B,KAAMC,EACN4B,OAAO,eAAeC,OAAO,QAAQC,YAAY,OACjDC,SAAS,KACTC,OAAQ,CACJC,OAAQ,aACRC,SAAU,OAEdC,KAAM,CACFX,KAAM,CACFY,UAAW,SAACxC,GAAD,OAAQG,EAAKS,SAASZ,IAAM,CAACyC,SAAU,OAAOA,WAE7DxB,aAAc,CACVyB,KAAM,SACNC,SAAUrC,EAAgB,GAC1BsC,SAAUtC,EAAgB,GAC1BkC,UAAW,SAACxC,GAAD,OAAO6C,YAAU7C,EAAE","file":"static/js/4.d36a0a90.chunk.js","sourcesContent":["import {Line} from '@ant-design/plots';\n\nimport {format_ts} from '../utils';\n\nfunction minmax(x, a, b) {\n    return Math.max(a, Math.min(b, x));\n}\n\nexport default function TopStarPlot({data}) {\n    let points=[];\n    let timepoints={};\n\n    let time_range_disp = [data.time_range[0]*1000, minmax(+new Date()+1000, data.time_range[0]*1000+1000, data.time_range[1]*1000)];\n\n    data.topstars.forEach((topstar) => {\n        topstar.submissions.forEach((sub) => {\n            timepoints[sub.timestamp_ms]=true;\n        });\n    });\n    timepoints=[\n        ...Object.keys(timepoints).map((x) => +x),\n        time_range_disp[0],\n        time_range_disp[1],\n        Infinity,\n    ].sort();\n\n    data.topstars.forEach((topstar, idx) => {\n        let tot_score=0;\n        let time_idx=0;\n\n        topstar.submissions.forEach((sub) => {\n            for(; timepoints[time_idx]<sub.timestamp_ms; time_idx++) {\n                points.push({\n                    timestamp_ms: timepoints[time_idx],\n                    score: tot_score,\n                    idx0: ''+idx,\n                });\n            }\n            tot_score+=sub.gained_score;\n        });\n        for(; time_idx<timepoints.length-1; time_idx++) {\n            points.push({\n                timestamp_ms: timepoints[time_idx],\n                score: tot_score,\n                idx0: ''+idx,\n            });\n        }\n    });\n\n    //console.log('! render chart', data, timepoints.map((x)=>new Date(x)), points);\n\n    return (\n        <Line\n            height={350}\n            data={points}\n            xField=\"timestamp_ms\" yField=\"score\" seriesField=\"idx0\"\n            stepType=\"hv\"\n            legend={{\n                layout: 'horizontal',\n                position: 'top',\n            }}\n            meta={{\n                idx0: {\n                    formatter: (x) => (data.topstars[x] || {nickname: '--'}).nickname,\n                },\n                timestamp_ms: {\n                    type: 'linear',\n                    minLimit: time_range_disp[0],\n                    maxLimit: time_range_disp[1],\n                    formatter: (x) => format_ts(x/1000),\n                }\n            }}\n        />\n    );\n}"],"sourceRoot":""}